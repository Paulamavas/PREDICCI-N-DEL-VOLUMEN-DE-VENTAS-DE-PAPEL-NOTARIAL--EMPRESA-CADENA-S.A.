# -*- coding: utf-8 -*-
"""10_Despliegue_Videojuegos_con_streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Eyz-aIQr29trZQaeMlKS5M2cLm5ukxU

# Despliegue

- Cargamos el modelo
- Cargamos los datos futuros
- Preparar los datos futuros
- Aplicamos el modelo para la predicción
"""

#Cargamos librerías principales
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#Cargamos el modelo
import pickle
filename = 'modeloFinal-reg10.pkl'
model_Tree, model_Knn, model_NN, min_max_scaler,model_rf, variables = pickle.load(open(filename, 'rb'))

#Cargamos los datos futuros
#data = pd.read_excel("Notarios_datosFuturos.xlsx")
#data.head()

#Interfaz gráfica
#Se crea interfaz gráfica con streamlit para captura de los datos

import streamlit as st

st.title('PREDICCIÓN DEL VOLUMEN DE VENTAS DE PAPEL NOTARIAL  -EMPRESA CADENA S.A.')

Proveedor_único = st.selectbox('Proveedor_único', ['SI','NO'])
Mes = st.selectbox('Mes', ['1','2','3','4','5','6','7','8','9','10','11','12'])
Días_Hábiles = st.selectbox('Días_Hábiles', ['20','21', '22','23'])
tasa_interés_hipotecario = st.slider('tasa_interés_hipotecario', min_value=5.0, max_value=20.0, value=10.15, step=0.01)
Desembolsos_créditos_hipotecarios = st.slider('Desembolsos_créditos_hipotecarios', min_value=10000, max_value=15000, value=13000, step=1)
Notarías_atendidas = st.slider('Notarías_atendidas', min_value=300, max_value=1500, value=600, step=1)
Inflación_mes = st.slider('Inflación_mes', min_value=3.0, max_value=15.0, value=5.15, step=0.01)
Tasa_desempleo = st.slider('Tasa_desempleo', min_value=3.0, max_value=20.0, value=8.15, step=0.01)


#Dataframe
datos = [[Proveedor_único, Mes,Días_Hábiles,tasa_interés_hipotecario,Desembolsos_créditos_hipotecarios,Notarías_atendidas,Inflación_mes,Tasa_desempleo]]
data = pd.DataFrame(datos, columns=['Proveedor_único','Mes','Días_Hábiles','tasa_interés_hipotecario','Desembolsos_créditos_hipotecarios','Notarías_atendidas','Inflación_mes','Tasa_desempleo']) #Dataframe con los mismos nombres de variables

#Se realiza la preparación
data_preparada=data.copy()

#En despliegue drop_first= False
data_preparada = pd.get_dummies(data_preparada, columns=['Proveedor_único'], drop_first=False, dtype=int)
data_preparada.head()

#Se adicionan las columnas faltantes
data_preparada=data_preparada.reindex(columns=variables,fill_value=0)
data_preparada.head()

#Se normaliza la edad para predecir con Knn, Red
#En los despliegues no se llama fit
cols_to_scale = ['Mes', 'Días_Hábiles', 'tasa_interés_hipotecario',
                 'Desembolsos_créditos_hipotecarios', 'Notarías_atendidas',
                 'Inflación_mes', 'Tasa_desempleo']

# Fit y transform de una sola vez
data_preparada[cols_to_scale] = min_max_scaler.fit_transform(data_preparada[cols_to_scale])
data_preparada.head()

"""# **Predicciones**"""

#Hacemos la predicción con el rf
Y_pred = model_rf.predict(data_preparada)
print(Y_pred)

data_preparada['Prediccion'] = Y_pred
data_preparada.head()
#Predicciones finales
data
